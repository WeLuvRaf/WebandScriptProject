<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>To-Do List</title>
    <style>
        .flash-message {
            color: green;
            font-weight: bold;
        }

        .error-message {
            color: red;
            font-weight: bold;
        }
    </style>
</head>

<body>
    <header>
        <img src="images/img1.png" alt="Task Manager Logo" width="100px" height="100px">
        <span>Task Master</span>
        <nav>
            <% if (!user) { %>
                <a href="/auth/login">Login</a>
                <a href="/auth/register">Register</a>
            <% } else { %>
                <a href="/auth/logout">Logout</a>
            <% } %>
        </nav>
    </header>
    
    <!-- Flash Messages -->
    <% if (success_msg) { %>
        <p class="flash-message"><%= success_msg %></p>
    <% } %>
    <% if (error_msg) { %>
        <p class="error-message"><%= error_msg %></p>
    <% } %>
    
    <h1>My To-Do List</h1>
    
    <% if (user) { %>
        <form id="addTaskForm">
            <input type="text" id="newTask" placeholder="Add a new task" required>
            <button type="submit">Add Task</button>
        </form>
    
        <ul id="taskList"></ul>
    <% } else { %>
        <p>Please <a href="/auth/login">log in</a> to manage your tasks.</p>
    <% } %>
    

    <script>
        
        let tasks = [];

        const addTaskForm = document.getElementById('addTaskForm');
        const newTaskInput = document.getElementById('newTask');
        const taskList = document.getElementById('taskList');

        addTaskForm.addEventListener('submit', function(event) {
            event.preventDefault();
            const task = newTaskInput.value.trim();
            if (task !== "") {
                tasks.push(task);
                newTaskInput.value = '';
                renderTasks();
                fetch('/add', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                    body: `newTask=${encodeURIComponent(task)}`
                })
                .then(response => response.json())
                .then(data => {
                    tasks = data.tasks;
                    renderTasks();
                })
                .catch(error => console.error('Error:', error));
            }
        });

        function renderTasks() {
            taskList.innerHTML = '';
            tasks.forEach(function(task, index) {
                const li = document.createElement('li');
                const taskText = document.createElement('span');
                taskText.textContent = task;
                li.appendChild(taskText);

                const editBtn = document.createElement('button');
                editBtn.textContent = 'Edit';
                editBtn.className = 'editBtn';
                editBtn.onclick = function() {
                    editTask(index);
                };
                li.appendChild(editBtn);

                const deleteBtn = document.createElement('button');
                deleteBtn.textContent = 'Delete';
                deleteBtn.className = 'deleteBtn';
                deleteBtn.onclick = function() {
                    deleteTask(task);
                };
                li.appendChild(deleteBtn);

                taskList.appendChild(li);
            });
        }

        function editTask(index) {
            const newTaskText = prompt('Edit task:', tasks[index]);
            if (newTaskText !== null && newTaskText.trim() !== "") {
                tasks[index] = newTaskText.trim();
                renderTasks();
                fetch('/edit', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                    body: `oldTask=${encodeURIComponent(tasks[index])}&updatedTask=${encodeURIComponent(newTaskText.trim())}`
                })
                .then(response => response.json())
                .then(data => {
                    tasks = data.tasks;
                    renderTasks();
                })
                .catch(error => console.error('Error:', error));
            }
        }

        function deleteTask(task) {
            tasks = tasks.filter(function(t) {
                return t !== task;
            });
            renderTasks();
            fetch('/delete', {
                method: 'POST',
                headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                body: `taskToDelete=${encodeURIComponent(task)}`
            })
            .then(response => response.json())
            .then(data => {
                tasks = data.tasks;
                renderTasks();
            })
            .catch(error => console.error('Error:', error));
        }
    </script>

    <footer>
        <p>Copyright Â© 2024 Task Master All Rights Reserved</p>
    </footer>
</body>
</html>
